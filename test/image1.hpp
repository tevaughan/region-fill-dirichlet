/// \file       test/image1.hpp
/// \copyright  2022 Thomas E. Vaughan.  See terms in LICENSE.
/// \brief      image1, mask1 and expected correlates.

#pragma once

#include <array>   // array
#include <cstdint> // int8_t


inline std::array<int, 12 * 12> const image1= {
      1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
      1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
      1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
      1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
      1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
      1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
      1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
      1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
      1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
      1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
      2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
      2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
};


inline bool mask1[12 * 12]= {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
};


inline int8_t expectedCen1[]= {
      0,  0,  0,  0,  -3, -3, -3, -3, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      -3, -4, -4, -4, -4, -2, -2, -4, -4, -4, -4, -3, //
      -3, -4, -4, -4, -2, 0,  0,  -2, -4, -4, -4, -3, //
      -3, -4, -4, -4, -2, 0,  0,  -2, -4, -4, -4, -3, //
      -3, -4, -4, -4, -4, -2, -2, -4, -4, -4, -4, -3, //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -3, -3, -3, -3, 0,  0,  0,  0,  //
};


inline int8_t expectedLft1[]= {
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, //
      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
};


inline int8_t expectedRgt1[]= {
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, //
      1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
};


inline int8_t expectedTop1[]= {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
};


inline int8_t expectedBot1[]= {
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
};


// EOF
