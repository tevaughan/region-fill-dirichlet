/// \file       test/mask1.hpp
/// \copyright  2022 Thomas E. Vaughan.  See terms in LICENSE.
/// \brief      mask1 and expected correlates.

#pragma once
#include <cstdint> // int8_t


inline bool mask1[12 * 12]= {
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
};


inline int8_t expectedCen1[]= {
      0,  0,  0,  0,  -3, -3, -3, -3, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      -3, -4, -4, -4, -4, -2, -2, -4, -4, -4, -4, -3, //
      -3, -4, -4, -4, -2, 0,  0,  -2, -4, -4, -4, -3, //
      -3, -4, -4, -4, -2, 0,  0,  -2, -4, -4, -4, -3, //
      -3, -4, -4, -4, -4, -2, -2, -4, -4, -4, -4, -3, //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -4, -4, -4, -4, 0,  0,  0,  0,  //
      0,  0,  0,  0,  -3, -3, -3, -3, 0,  0,  0,  0,  //
};


inline int8_t expectedLft1[]= {
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, //
      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, //
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
};


inline int8_t expectedRgt1[]= {
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, //
      1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, //
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
};


inline int8_t expectedTop1[]= {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
};


inline int8_t expectedBot1[]= {
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
};


// EOF
